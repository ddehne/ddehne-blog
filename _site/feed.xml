<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-10-22T20:37:38-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">David Dehne</title><subtitle>The work and musings of david dehne</subtitle><entry><title type="html">Broadcasting SNS from AWS Realtime</title><link href="http://localhost:4000/jekyll/update/2018/05/04/aws-sns-broadcast.html" rel="alternate" type="text/html" title="Broadcasting SNS from AWS Realtime" /><published>2018-05-04T16:49:51-05:00</published><updated>2018-05-04T16:49:51-05:00</updated><id>http://localhost:4000/jekyll/update/2018/05/04/aws-sns-broadcast</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2018/05/04/aws-sns-broadcast.html">&lt;p&gt;Recently, at a client site, my team was in need of integrating real-time broadcast capability to a browser-based interface (written in React). To achieve this, we decided on establishing a persistent websocket connection between the client interface and an EC2 instance running a Node.js server. The SNS topic would then send an HTTP Post to that server on broadcast. In this post I will guide you through the process of creating a bare-bones sample SNS real-time broadcast application for your front-end application of choice.&lt;/p&gt;

&lt;p&gt;TL;DR hereâ€™s a Git repo with the completed project code.&lt;/p&gt;</content><author><name></name></author><category term="AWS" /><category term="SNS" /><category term="Websockets" /><category term="Javascript" /><summary type="html">Recently, at a client site, my team was in need of integrating real-time broadcast capability to a browser-based interface (written in React). To achieve this, we decided on establishing a persistent websocket connection between the client interface and an EC2 instance running a Node.js server. The SNS topic would then send an HTTP Post to that server on broadcast. In this post I will guide you through the process of creating a bare-bones sample SNS real-time broadcast application for your front-end application of choice.</summary></entry><entry><title type="html">Welcome to my blog!</title><link href="http://localhost:4000/jekyll/update/2018/05/01/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to my blog!" /><published>2018-05-01T16:49:51-05:00</published><updated>2018-05-01T16:49:51-05:00</updated><id>http://localhost:4000/jekyll/update/2018/05/01/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2018/05/01/welcome-to-jekyll.html">&lt;p&gt;Welcome to my blog!!&lt;/p&gt;</content><author><name></name></author><summary type="html">Welcome to my blog!!</summary></entry></feed>